"""This module implements a handler for the Python language."""

from __future__ import annotations

from typing import Any

from mkdocstrings.handlers.base import BaseHandler

from mkdocstrings_handlers.{{ python_package_import_name }}.collector import {{ language|title }}Collector
from mkdocstrings_handlers.{{ python_package_import_name }}.renderer import {{ language|title }}Renderer


class {{ language|title }}Handler(BaseHandler):
    """The {{ language|title }} handler class.

    Attributes:
        domain: The cross-documentation domain/language for this handler.
        enable_inventory: Whether this handler is interested in enabling the creation
            of the `objects.inv` Sphinx inventory file.
    """

    domain: str = "{{ language|lower }}"  # to match Sphinx's default domain
    enable_inventory: bool = False


def get_handler(
    theme: str,  # noqa: W0613 (unused argument config)
    custom_templates: str | None = None,
    **config: Any,
) -> {{ language|title }}Handler:
    """Simply return an instance of `{{ language|title }}Handler`.

    Arguments:
        theme: The theme to use when rendering contents.
        custom_templates: Directory containing custom templates.
        **config: Configuration passed to the handler.

    Returns:
        An instance of the handler.
    """
    return {{ language|title }}Handler(
        collector={{ language|title }}Collector(),
        renderer={{ language|title }}Renderer("{{ language|lower }}", theme, custom_templates),
    )
